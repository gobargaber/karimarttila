@list:
   just --list

# Start backend repl.
@backend:
    clj -M:dev:test:common:backend:postgres -m nrepl.cmdline -i -C

# Start backend repl with my toolbox.
@backend-kari:
    clj -M:dev:test:common:backend:postgres:kari -m nrepl.cmdline -i -C

# Start backend repl with my toolbox and with debug-repl capability.
@backend-debug-kari:
    clj -M:dev:test:common:backend:kari -m nrepl.cmdline --middleware '[com.gfredericks.debug-repl/wrap-debug-repl]' -i -C

@backend-debug-reveal-kari:
    # clj -J-Dvlaaad.reveal.prefs="{:theme :light}" -M:dev:test:common:backend:reveal:kari -m nrepl.cmdline --middleware '[com.gfredericks.debug-repl/wrap-debug-repl vlaaad.reveal.nrepl/middleware]' -i -C
    clj -M:dev:test:common:backend:reveal:kari -m nrepl.cmdline --middleware '[com.gfredericks.debug-repl/wrap-debug-repl vlaaad.reveal.nrepl/middleware]'  -i -C

@backend-debug-reveal-kari-port:
    # clj -J-Dvlaaad.reveal.prefs="{:theme :light}" -M:dev:test:common:backend:reveal:kari -m nrepl.cmdline --middleware '[com.gfredericks.debug-repl/wrap-debug-repl vlaaad.reveal.nrepl/middleware]' -p 44444 -i -C
    clj -M:dev:test:common:backend:reveal:kari -m nrepl.cmdline --middleware '[com.gfredericks.debug-repl/wrap-debug-repl vlaaad.reveal.nrepl/middleware]' -p 44444 -i -C

# Start backend repl with my toolbox for Emacs.
@backend-debug-kari-emacs:
    PROFILE=emacs clj -M:dev:test:common:backend:reveal:kari:emacs -m nrepl.cmdline --middleware '[com.gfredericks.debug-repl/wrap-debug-repl vlaaad.reveal.nrepl/middleware cider.nrepl/cider-middleware]' -p 55555 -i -C

# Init node packages.
@init:
   mkdir -p target
   mkdir -p classes
   npm install

# start frontend auto-compilation
@frontend:
    cp node_modules/bulma/css/bulma.min.css dev-resources/public/css/.
    cp node_modules/bulma-slider/dist/css/bulma-slider.min.css dev-resources/public/css/.
    cp node_modules/bulma-slider/dist/js/bulma-slider.min.js dev-resources/public/js/.
    npm run dev

# DO NOT USE: Start frontend auto-compilation. Use above frontend instead.
# @frontend-kari:
#   clj -M:dev:common:frontend:kari -m shadow.cljs.devtools.cli watch app

# SASS auto-compile
@css:
    npm run build:sass

# Update dependencies.
@outdated:
    clj -M:dev:test:common:backend:frontend:outdated --update

# Create uberjar.
@uberjar:
    mkdir -p prod-resources/public/js
    mkdir -p prod-resources/public/css
    mkdir -p target/shadow/prod/resources/public/data
    cp resources/public/data/world-110m.json target/shadow/prod/resources/public/data
    cp dev-resources/public/css/bulma*.css target/shadow/prod/resources/public/css/.
    cp dev-resources/public/js/bulma*.js target/shadow/prod/resources/public/js/.
    npm run build:sass
    clj -M:common:frontend -m shadow.cljs.devtools.cli release app
    clj -M:common:backend:uberjar

# Run uberjar (run as PROFILE=prod just run-uberjar)
run-uberjar:
    java -cp target/worldstat.jar clojure.main -m worldstat.backend.main

# Lint.
@lint:
    clj -M:dev:backend:common:frontend:test -m clj-kondo.main --lint src test

# Test.
@test options:
    ./run-tests.sh {{options}}

# Clean .cpcache and .shadow-cljs directories, run npm install
@clean:
    rm -rf .cpcache/*
    rm -rf .shadow-cljs/*
    rm -rf target/*
    rm -rf dev-resources/public/js/*
    rm -rf dev-resources/public/css/*
    rm -rf prod-resources/public/js/*
    rm -rf prod-resources/public/css/*
    rm -rf dynamodb/dev-resources/*
    rm -rf out/*
    npm install
